Aqui la forma tradicional con javascript puro
Notar que tenía que comtemplar la diferencia entre navegadores.

<script>

	window.onload = function(){
		alert('Esto es algo muy imporatnte')
	}

	window.onload = function(){
		alert("Bienvenido")
	}
</script>

Si hacemos 2 alerts, el último pisará al anterior

Si se cumple que el objeto windows tiene el addEventListener
entonces lo llamamos,
SINO (estamos en IE, tenemos que hacerlo diferente :( )


<script>
	function darBienvenida(){
		alert('Bienvenida');
	}
	function hacerAlgoImportante(){
		console.log('Estoy haciendo algo importante para la aplicación')
	}
	if (window.addEventListener){
		window.addEventListener('load', hacerAlgoImportante);
		window.addEventListener('load', darBienvenida);
	}else {
		window.attachEvent('onload', hacerAlgoImportante);
		window.attachEvent('onload', darBienvenida);
	}

</script>
Mas reducido
<script>
	function atachar(elem, evento, funcion){
		if (elem.addEventListener){
			elem.addEventListener(evento, funcion);
		}else {
			elem.attachEvent('on'+evento, funcion);
		}
	}

	atachar(window, 'load', hacerAlgoImportante);
	atachar(window, 'load', darBienvenida);
</script>
Luego aparececería jQuery,entonces las cosas podrian hacerce así:


<script>
$('.publicar').on('click', darBienvenida);
$(window).on('load', hacerAlgoImportante);
</script>
jQuery
======
	- Una plataforma
	- Nos independizaba de los navegadores
	- Podías utilizar APIS ( Aplication Programming Interface)
		Crear una nueva interface sería lo que hicimos antes con atachar.
	- url: jquery
	- Codigo liviano, ahora ya no es tanto así
	- Cross-Browser: funcionará con cualquier navegador
	- CSS3 Compliant: soporta css3 desde mucho antes que los navegadores.

Instalar
========
	- Descargar desde url: jquery.com
	- Agregar <script src="jquery-2.0.3.min.js"></script>
<script></script>

DOM : Document Object Model
===
Todos los elementos dentro de una página web, en javascript
son objetos, no sólo tienen atributos, sino que tienen tambien
eventos a los cuales nos podemos enganchar.

Funciones:
=========

	Anónimas:

		$('.publicar').on('click', function(){
			alert('Bienvenido!');
		});

	La diferencia con una función NOMBRADA
	sería que con una función NOMBRADA, la podemos quitar con

	OFF:

		$('.publicar')on('click', darBienvenida);
		$('.publicar')off('click', darBienvenida);


	$('form').css('display', 'block');
		Cambia el valor de una propiedad css

	$('form').slideDown();
		Aparece el formulario como un slide.

	$('form').slideToggle();
		Aparece y desaparece el formulario según su estado
Eventos :
=======

onload, del objeto windows, sólo se dispara cuando se cargó TODO)css,js, todas las imagenes), por ello conviene usar otro evento:

document.content.load => Se dispará cuando sólo se cargo el html, y se armó el árbol de DOM.

<script>

	//$(window).on('load', hacerAlgoImportante);
	$(hacerAlgoImportante);
</script>

PROYECTOS DERIVADOS DE jQuery:
=============================

JQueryUI:
========
	- Creo objetos ya armados ( calendarios, ) usando jQuery Mobile.
	- Tambien preparados para que tengan distintas presentaciones con sus templates
	- Luego se pensó en hacer jQuery mobile, donde se agregan y quitan características
	  para especializarlo.

QUnit: TEST PROGRAMÁTICOS
=====
	- Si tenemos test funcionales, podemos hacer test programáticos

Sizzle: Motor interno, que tiene jQuery para hacer la captura de elementos.
======

